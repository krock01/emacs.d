* load file
#+BEGIN_SRC emacs-lisp
(defun load-if-exists (f)
  "load the elisp file only if it exists and is readable"
  (if (file-readable-p f)
      (load-file f)))
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
;(load-if-exists "~/Dropbox/shared/mu4econfig.el")
;(load-if-exists "~/Dropbox/shared/not-for-github.el")
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp
(require 'init-tweaks)
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(require 'init-try)
#+END_SRC

* which key
#+BEGIN_SRC emacs-lisp
(require 'init-which-key)
#+END_SRC
* ace windows for easy window switch
#+BEGIN_SRC emacs-lisp
(require 'init-ace)
#+END_SRC
* swiper/ivy/counsel
#+BEGIN_SRC emacs-lisp
(require 'init-ivy)
#+END_SRC
* avy navigate searching and jumping to it
#+BEGIN_SRC emacs-lisp
(require 'init-avy)
#+END_SRC
* auto-complete
#+BEGIN_SRC emacs-lisp
(require 'init-ac)
#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp
(require 'init-theme)
#+END_SRC
* reveal.js
#+BEGIN_SRC emacs-lisp
(require 'init-reveal)
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
(require 'init-check)
#+END_SRC
* solve python shell warning
#+BEGIN_SRC emacs-lisp
;(setq python-shell-completion-native-enable nil)

#+END_SRC
* solve mac shell path
#+BEGIN_SRC emacs-lisp
(require 'init-path-shell)
#+END_SRC
* install python environment
** python check
 sudo -H pip install pylint
** python complete
 sudo -H pip install jedi
 sudo -H pip install epc
** use jedi must install virtualenv
 sudo -H pip install virtualenv
* jedi
#+BEGIN_SRC emacs-lisp
;(use-package jedi
;  :ensure t
;  :init
;  (add-hook 'python-mode-hook 'jedi:setup)
;  (add-hook 'python-mode-hook 'jedi:ac-setup))
#+END_SRC
* elpy
#+BEGIN_SRC emacs-lisp
;(use-package elpy
;:ensure t
;:config 
;(elpy-enable))
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
(require 'init-yasnippet)
#+END_SRC
* undo tree
#+BEGIN_SRC emacs-lisp
(require 'init-undo)
#+END_SRC
* misc packages
#+BEGIN_SRC emacs-lisp
(require 'init-misc)
#+END_SRC
* iedit
#+BEGIN_SRC emacs-lisp
; mark and edit all copies of the marked region simultaniously. kbd C-;
(require 'init-iedit)
#+END_SRC
* webmode
#+BEGIN_SRC emacs-lisp
(require 'init-web)
#+END_SRC
* javascript
#+BEGIN_SRC emacs-lisp
(require 'init-js)
#+END_SRC
* emmet
#+BEGIN_SRC emacs-lisp
(require 'init-emmet)
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
(require 'init-projectile)
#+END_SRC
* dump
#+BEGIN_SRC emacs-lisp
(require 'init-jump)
#+END_SRC
* dired
#+BEGIN_SRC emacs-lisp
;(use-package dired+
;  :ensure t
;  :config (require 'dired+)
;  )


;(use-package dired-quick-sort
;  :ensure t
;  :config
;  (dired-quick-sort-setup))
#+END_SRC
* ibuffer
#+BEGIN_SRC emacs-lisp
(require 'init-ibuffer)
#+END_SRC
* c++ java c
#+BEGIN_SRC emacs-lisp
(require 'init-gtag)
#+END_SRC
* git
#+BEGIN_SRC emacs-lisp
(require 'init-git)
#+END_SRC
* babel stuff
#+BEGIN_SRC emacs-lisp
;; babel stuff
;(org-babel-do-load-languages
; 'org-babel-load-languages
; '((python . t)
;   (emacs-lisp . t)
;   (C . t)
;   (js . t)
;   (dot . t)
;   (org . t)
;   ))
#+END_SRC
* treemacs
#+BEGIN_SRC emacs-lisp
(require 'init-tree)
#+END_SRC
* better shell
#+BEGIN_SRC emacs-lisp
(require 'init-shell)
#+END_SRC
* typescript
#+BEGIN_SRC emacs-lisp
(require 'init-typescript)
#+END_SRC
