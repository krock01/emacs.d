* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC

* which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:ensure t 
	:config
	(which-key-mode))
#+END_SRC
* ace windows for easy window switch
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init
(progn
(setq aw-scope 'frame)
(global-set-key (kbd "C-x O") 'other-frame)
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
  ))
#+END_SRC
* swiper/ivy/counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
:ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))




  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
* avy navigate searching and jumping to it
#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
#+END_SRC
* auto-complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
:ensure t
:init
(progn
  (ac-config-default)
  (global-auto-complete-mode t)
  ))
#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
      :ensure t
      :init
      (load-theme 'spacemacs-dark t)
     )
#+END_SRC
* reveal.js
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root " http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
:ensure t)
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
#+END_SRC
* solve python shell warning
#+BEGIN_SRC emacs-lisp
(setq python-shell-completion-native-enable nil)

#+END_SRC
* solve mac shell path
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
 :ensure t)
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC
* install python environment
** python check
 sudo -H pip install pylint
** python complete
 sudo -H pip install jedi
 sudo -H pip install epc
** use jedi must install virtualenv
 sudo -H pip install virtualenv
* jedi
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi:ac-setup))
#+END_SRC
* elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
:ensure t
:config 
(elpy-enable))
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
    (yas-global-mode 1))
#+END_SRC
* undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
:ensure t
  :init
    (global-undo-tree-mode))
#+END_SRC
* misc packages
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
(use-package beacon
:ensure t
:config
(beacon-mode 1))
(use-package hungry-delete
:ensure t
:config
(global-hungry-delete-mode))
(use-package expand-region
:ensure t
:config
(global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
* iedit
#+BEGIN_SRC emacs-lisp
; mark and edit all copies of the marked region simultaniously. kbd C-;
(use-package iedit
:ensure t)

; if you're windened, narrow to the region, if you're narrowed, widen
; bound to C-x n
(defun narrow-or-widen-dwim (p)
"If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
Intelligently means: region, org-src-block, org-subtree, or defun,
whichever applies first.
Narrowing to org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is already
narrowed."
(interactive "P")
(declare (interactive-only))
(cond ((and (buffer-narrowed-p) (not p)) (widen))
((region-active-p)
(narrow-to-region (region-beginning) (region-end)))
((derived-mode-p 'org-mode)
;; `org-edit-src-code' is not a real narrowing command.
;; Remove this first conditional if you don't want it.
(cond ((ignore-errors (org-edit-src-code))
(delete-other-windows))
((org-at-block-p)
(org-narrow-to-block))
(t (org-narrow-to-subtree))))
(t (narrow-to-defun))))

;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing keymap, that's
;; how much I like this command. Only copy it if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC
* load file
#+BEGIN_SRC emacs-lisp
;(defun load-if-exists (f)
;  "load the elisp file only if it exists and is readable"
;  (if (file-readable-p f)
;      (load-file f)))

;(load-if-exists "~/Dropbox/shared/mu4econfig.el")
;(load-if-exists "~/Dropbox/shared/not-for-github.el")
#+END_SRC
